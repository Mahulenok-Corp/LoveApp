name: Docker Image CI - Prod
on:
  push:
    branches:
      - "main"
  # pull_request:
  #   branches:
  #     - "main"
  workflow_dispatch:

jobs:
  backup-and-build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          # Add PostgreSQL apt repository
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

          # Update and install PostgreSQL 16 client
          sudo apt-get update
          sudo apt-get install -y postgresql-client-16

          # Update AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

          # Verify installation
          aws --version

      # - name: Backup Database
      #   env:
      #     PGHOST: ${{ secrets.DB_PROD_HOST }}
      #     PGPORT: ${{ secrets.DB_PORT }}
      #     PGUSER: ${{ secrets.DB_USER }}
      #     PGPASSWORD: ${{ secrets.DB_PROD_PASSWORD }}
      #     PGDATABASE: ${{ secrets.DB_NAME }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
      #     AWS_ENDPOINT: ${{ secrets.DO_SPACES_ENDPOINT_ORIGIN }}
      #   run: |
      #     DATE=$(date +"%Y%m%d_%H:%M:%S")
      #     FILENAME="backup_${DATE}.sql"

      #     echo "Creating backup..."
      #     pg_dump -Fc > "${FILENAME}"

      #     echo "Uploading to DigitalOcean Spaces..."
      #     aws s3 cp "${FILENAME}" \
      #         "s3://${{ secrets.DO_SPACES_BACKUPS_DIR }}/prod/" \
      #         --endpoint-url "${{ secrets.DO_SPACES_ENDPOINT_ORIGIN }}" \
      #         --no-verify-ssl

      #     echo "Backup completed successfully"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/notgift:backend

      - name: Cleanup
        if: always()
        run: |
          rm -f backup_*.sql*
